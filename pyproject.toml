[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mangadx-scrapper"
version = "1.0.0"
authors = [
    {name = "MangaDx Scrapper Team"},
]
description = "A Python library and CLI tool for downloading manga from MangaDx"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "manga",
    "mangadx",
    "download",
    "scraper",
    "api",
    "cli",
    "comics",
    "webtoon",
]
dependencies = [
    "requests>=2.28.0",
    "colorama>=0.4.6",
    "python-dotenv>=1.0.0",
    "urllib3>=1.26.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]

[project.urls]
Homepage = "https://github.com/mangadx/mangadx-scrapper"
"Bug Reports" = "https://github.com/mangadx/mangadx-scrapper/issues"
Source = "https://github.com/mangadx/mangadx-scrapper"
Documentation = "https://github.com/mangadx/mangadx-scrapper/blob/main/README.md"

[project.scripts]
mangadx-scrapper = "mangadx_scrapper.cli.main:main"
mangadx-search = "mangadx_scrapper.cli.search:search_command"
mangadx-download = "mangadx_scrapper.cli.download:download_command"

[tool.setuptools]
packages = ["mangadx_scrapper", "config"]

[tool.setuptools.package-data]
mangadx_scrapper = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "colorama.*",
    "requests.*",
    "urllib3.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["mangadx_scrapper"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]